[gd_scene load_steps=32 format=4 uid="uid://6ev81th3po4m"]

[ext_resource type="Script" path="res://scripts/levels/level_0.gd" id="1_ooeys"]
[ext_resource type="PackedScene" uid="uid://054ttw8cqh5y" path="res://scenes/levels/grid.tscn" id="2_tsop5"]
[ext_resource type="Texture2D" uid="uid://041iv8uy6m00" path="res://assets/art/tilesheet_v4.png" id="3_cfdg0"]
[ext_resource type="PackedScene" uid="uid://c705y5st7xlub" path="res://scenes/entities/gate.tscn" id="4_b1u7r"]
[ext_resource type="PackedScene" uid="uid://ckhoxemw6imv7" path="res://scenes/levels/level_portal.tscn" id="5_o0t7v"]
[ext_resource type="PackedScene" uid="uid://b3y0u5fjy10s5" path="res://scenes/entities/lock.tscn" id="6_45vor"]
[ext_resource type="PackedScene" uid="uid://ccbebsya6a2to" path="res://scenes/entities/hash.tscn" id="6_tr5qf"]
[ext_resource type="PackedScene" uid="uid://dhlsk8ceh2roe" path="res://scenes/entities/key.tscn" id="7_5iu1x"]
[ext_resource type="PackedScene" uid="uid://ndlp3wv23s3t" path="res://scenes/entities/carrier_bug.tscn" id="8_1j6ll"]
[ext_resource type="PackedScene" uid="uid://bnechtecirqu3" path="res://scenes/entities/mover_process.tscn" id="9_6qkvx"]
[ext_resource type="Script" path="res://scenes/levels/draw.gd" id="11_607en"]
[ext_resource type="PackedScene" uid="uid://dt2k60d54gqys" path="res://scenes/entities/decrypt_process.tscn" id="11_l0djl"]
[ext_resource type="Script" path="res://scripts/entities/segmented_bar.gd" id="12_dns85"]
[ext_resource type="Shader" path="res://assets/shaders/progressbar.gdshader" id="13_1fxkq"]
[ext_resource type="PackedScene" uid="uid://dgyrvd164285p" path="res://scenes/ui/level_lose_ui.tscn" id="14_fcd8v"]
[ext_resource type="PackedScene" uid="uid://cws63lnwpdthq" path="res://scenes/ui/level_end_ui.tscn" id="15_pmuli"]

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_5f5ro"]
texture = ExtResource("3_cfdg0")
texture_region_size = Vector2i(64, 64)
1:1/0 = 0
1:1/0/custom_data_0 = true
1:0/0 = 0
1:0/0/custom_data_0 = true
0:0/0 = 0
0:0/0/custom_data_0 = true
0:1/0 = 0
0:1/0/custom_data_0 = true
0:2/0 = 0
0:2/0/custom_data_0 = true
1:2/0 = 0
1:2/0/custom_data_0 = true
2:1/0 = 0
2:1/0/custom_data_0 = true
2:0/0 = 0
2:0/0/custom_data_0 = true
2:2/0 = 0
2:2/0/custom_data_0 = true
0:3/0 = 0
0:3/0/custom_data_0 = true
0:4/0 = 0
0:4/0/custom_data_0 = true
0:5/0 = 0
0:5/0/custom_data_0 = true
1:5/0 = 0
1:5/0/custom_data_0 = true
2:5/0 = 0
2:5/0/custom_data_0 = true
2:4/0 = 0
2:4/0/custom_data_0 = true
2:3/0 = 0
2:3/0/custom_data_0 = true
1:3/0 = 0
1:3/0/custom_data_0 = true
3:0/0 = 0
3:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-32, -32, 32, -32, 32, 32, -32, 32)
3:1/0 = 0
3:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-32, -32, 32, -32, 32, 32, -32, 32)
4:1/0 = 0
4:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-32, -32, 32, -32, 32, 32, -32, 32)
4:0/0 = 0
4:0/0/custom_data_0 = true
3:2/0 = 0
3:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-32, -32, 32, -32, 32, 32, -32, 32)
5:0/0 = 0
5:0/0/custom_data_0 = true
5:1/0 = 0
5:1/0/custom_data_0 = true
5:2/0 = 0
5:2/0/custom_data_0 = true
6:2/0 = 0
6:2/0/custom_data_0 = true
7:2/0 = 0
7:2/0/custom_data_0 = true
6:1/0 = 0
6:1/0/custom_data_0 = true
6:0/0 = 0
6:0/0/custom_data_0 = true
7:0/0 = 0
7:0/0/custom_data_0 = true
7:1/0 = 0
7:1/0/custom_data_0 = true

[sub_resource type="TileSet" id="TileSet_d4eyp"]
tile_size = Vector2i(64, 64)
physics_layer_0/collision_layer = 1
custom_data_layer_0/name = "Walkable"
custom_data_layer_0/type = 1
sources/0 = SubResource("TileSetAtlasSource_5f5ro")

[sub_resource type="Shader" id="Shader_2i1hc"]
code = "shader_type canvas_item;


uniform bool stepify = true;
uniform float value : hint_range(0.0, 1.0) = 1.0;
uniform int count = 1;
uniform vec2 margin;
uniform float shear_angle : hint_range(-1.0, 1.0) = 0.0; // -90 to 90 degrees
uniform sampler2D gradient_x : source_color;
uniform sampler2D gradient_y : source_color;
uniform bool use_value_gradient = false;
uniform bool invert = false;


vec4 get_gradient_color(sampler2D src, float position) {
	position = clamp(position, 0.01, 0.99); // Color at 0.0 and 1.0 get interpolated by both end
    return texture(src, vec2(position, 0.5));
}

float square_shape(vec2 uv, vec2 size) {
	vec2 bl = step((1.0-size)/2.0, uv); // bottom-left
	vec2 tr = step((1.0-size)/2.0, 1.0-uv); // top-right
	return bl.x * bl.y * tr.x * tr.y;
}

vec2 segmented_bar(vec2 uv) {
	float shape = 0.0;
	float bar_count = float(count);
	float bar_size = 1.0/bar_count;
	float separation = margin.x;
	float separation_width = separation * bar_size;
	float bar_value = 0.0;
	for (int i=0;i<count;i++) {
		float index_value = float(i+1) / float(count);
		
		if (index_value > value) {
			// Ceil
			if (value < float(i) * bar_size || value <= 0.0) {
				continue;
			}
		}
		
		vec2 uv4 = uv;
		vec2 size4 = vec2(bar_size, 1.0-margin.y);
		//size4.x = bar_size;
		uv4.x = uv4.x - (bar_size/2.0) + 0.5;
		uv4.x -= bar_size * float(i); // Offset
		size4.x -= separation_width;
		shape += square_shape(uv4, size4);
		bar_value = index_value;
	}
	return vec2(shape, bar_value);
}

float snap(float original, float numerator, float denominator)
{
    return round(original * denominator / numerator) * numerator / denominator;
}

vec3 hsv_to_rgb(vec3 color) {
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(color.xxx + K.xyz) * 6.0 - K.www);
	return color.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), color.y);
}

float round_place(float num,float places) {
	return (round(num*pow(10,places))/pow(10,places));
}

float map_range(float min1, float max1, float min2, float max2, float v) {
	float p = (v - min1) / (max1 - min1);
	return p * (max2 - min2) + min2;
}

void fragment() {
	vec2 uv = UV;
	
	float angle = 1.571 + (shear_angle * PI/4.0);
	float shear_value = (cos(angle)/sin(angle));
	float shear = shear_value * uv.y;
	uv.x = uv.x + shear;
	uv.x -= shear_value/2.0;
	
	uv.x *= 1.0+abs(shear_value);
	uv.x -= abs(shear_value)/2.0;
	
	float bar_count = float(count);
	float bar_size = 1.0/bar_count;
	float separation_width = margin.x * bar_size;
	
	vec2 shape = segmented_bar(uv);
	vec4 gradient_color = vec4(0.0);
	float gradient_x_pos = uv.x;
	if (use_value_gradient) {
		gradient_x_pos = value;
	}
	vec4 gradient_color_x = get_gradient_color(gradient_x, gradient_x_pos);
	if (stepify) {
		float step_size = float(count)/2.0;
		gradient_color_x = get_gradient_color(gradient_x, snap(gradient_x_pos, 1.0, step_size));
	}
	else {
		shape.x *= step(uv.x, value);
	}
	
	float y = map_range(0.5-(1.0-margin.y)/2.0, 0.5+(1.0-margin.y)/2.0, 0.0, 1.0, uv.y);
	if (invert) {
		y = uv.y;
		shape.x = 1.0 - shape.x;
		shape.x *= step(0.0, y);
		shape.x *= step(y, 1.0);
	}
	vec4 gradient_color_y = get_gradient_color(gradient_y, y);
	gradient_color += gradient_color_x;
	gradient_color = mix(gradient_color_x, gradient_color_y, gradient_color_y.a);
	
	
	
	COLOR = vec4(gradient_color.rgb, shape.x);
}
"

[sub_resource type="Gradient" id="Gradient_8f6s2"]
offsets = PackedFloat32Array(0)
colors = PackedColorArray(0.0073257, 0.0864726, 0.000844045, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_xw64a"]
gradient = SubResource("Gradient_8f6s2")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_d45bt"]
shader = SubResource("Shader_2i1hc")
shader_parameter/stepify = true
shader_parameter/value = 1.0
shader_parameter/count = 1
shader_parameter/margin = Vector2(0, 0)
shader_parameter/shear_angle = -0.05
shader_parameter/use_value_gradient = false
shader_parameter/invert = false
shader_parameter/gradient_y = SubResource("GradientTexture1D_xw64a")

[sub_resource type="Shader" id="Shader_ujtf1"]
code = "shader_type canvas_item;


uniform bool stepify = true;
uniform float value : hint_range(0.0, 1.0) = 1.0;
uniform int count = 1;
uniform vec2 margin;
uniform float shear_angle : hint_range(-1.0, 1.0) = 0.0; // -90 to 90 degrees
uniform sampler2D gradient_x : source_color;
uniform sampler2D gradient_y : source_color;
uniform bool use_value_gradient = false;
uniform bool invert = false;


vec4 get_gradient_color(sampler2D src, float position) {
	position = clamp(position, 0.01, 0.99); // Color at 0.0 and 1.0 get interpolated by both end
    return texture(src, vec2(position, 0.5));
}

float square_shape(vec2 uv, vec2 size) {
	vec2 bl = step((1.0-size)/2.0, uv); // bottom-left
	vec2 tr = step((1.0-size)/2.0, 1.0-uv); // top-right
	return bl.x * bl.y * tr.x * tr.y;
}

vec2 segmented_bar(vec2 uv) {
	float shape = 0.0;
	float bar_count = float(count);
	float bar_size = 1.0/bar_count;
	float separation = margin.x;
	float separation_width = separation * bar_size;
	float bar_value = 0.0;
	for (int i=0;i<count;i++) {
		float index_value = float(i+1) / float(count);

		if (index_value > value) {
			// Ceil
			if (value < float(i) * bar_size || value <= 0.0) {
				continue;
			}
		}

		vec2 uv4 = uv;
		vec2 size4 = vec2(bar_size, 1.0-margin.y);
		//size4.x = bar_size;
		uv4.x = uv4.x - (bar_size/2.0) + 0.5;
		uv4.x -= bar_size * float(i); // Offset
		size4.x -= separation_width;
		shape += square_shape(uv4, size4);
		bar_value = index_value;
	}
	return vec2(shape, bar_value);
}

float snap(float original, float numerator, float denominator)
{
    return round(original * denominator / numerator) * numerator / denominator;
}

vec3 hsv_to_rgb(vec3 color) {
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(color.xxx + K.xyz) * 6.0 - K.www);
	return color.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), color.y);
}

float round_place(float num,float places) {
	return (round(num*pow(10,places))/pow(10,places));
}

float map_range(float min1, float max1, float min2, float max2, float v) {
	float p = (v - min1) / (max1 - min1);
	return p * (max2 - min2) + min2;
}

void fragment() {
	vec2 uv = UV;

	float angle = 1.571 + (shear_angle * PI/4.0);
	float shear_value = (cos(angle)/sin(angle));
	float shear = shear_value * uv.y;
	uv.x = uv.x + shear;
	uv.x -= shear_value/2.0;

	uv.x *= 1.0+abs(shear_value);
	uv.x -= abs(shear_value)/2.0;

	float bar_count = float(count);
	float bar_size = 1.0/bar_count;
	float separation_width = margin.x * bar_size;

	vec2 shape = segmented_bar(uv);
	vec4 gradient_color = vec4(0.0);
	float gradient_x_pos = uv.x;
	if (use_value_gradient) {
		gradient_x_pos = value;
	}
	vec4 gradient_color_x = get_gradient_color(gradient_x, gradient_x_pos);
	if (stepify) {
		float step_size = float(count)/2.0;
		gradient_color_x = get_gradient_color(gradient_x, snap(gradient_x_pos, 1.0, step_size));
	}
	else {
		shape.x *= step(uv.x, value);
	}

	float y = map_range(0.5-(1.0-margin.y)/2.0, 0.5+(1.0-margin.y)/2.0, 0.0, 1.0, uv.y);
	if (invert) {
		y = uv.y;
		shape.x = 1.0 - shape.x;
		shape.x *= step(0.0, y);
		shape.x *= step(y, 1.0);
	}
	vec4 gradient_color_y = get_gradient_color(gradient_y, y);
	gradient_color += gradient_color_x;
	gradient_color = mix(gradient_color_x, gradient_color_y, gradient_color_y.a);



	COLOR = vec4(gradient_color.rgb, shape.x);
}
"

[sub_resource type="Gradient" id="Gradient_cotts"]
offsets = PackedFloat32Array(0)
colors = PackedColorArray(0.011257, 0.114612, 0.0025881, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_jdo3j"]
gradient = SubResource("Gradient_cotts")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_gtxqq"]
shader = SubResource("Shader_ujtf1")
shader_parameter/stepify = true
shader_parameter/value = 1.0
shader_parameter/count = 10
shader_parameter/margin = Vector2(0.2, 0.2)
shader_parameter/shear_angle = -0.03
shader_parameter/use_value_gradient = false
shader_parameter/invert = false
shader_parameter/gradient_y = SubResource("GradientTexture1D_jdo3j")

[sub_resource type="Gradient" id="Gradient_nepw8"]
offsets = PackedFloat32Array(0, 0.915751)
colors = PackedColorArray(0.161999, 0.607536, 0.0277809, 1, 0.737392, 0.165911, 0.248658, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_47bex"]
gradient = SubResource("Gradient_nepw8")

[sub_resource type="Gradient" id="Gradient_xibvm"]
offsets = PackedFloat32Array(0, 0.274725)
colors = PackedColorArray(0, 0, 0, 1, 0.158058, 0.59512, 0.0268855, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_puwax"]
gradient = SubResource("Gradient_xibvm")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_8y8o3"]
shader = ExtResource("13_1fxkq")
shader_parameter/stepify = true
shader_parameter/value = 0.0
shader_parameter/count = 10
shader_parameter/margin = Vector2(0.2, 0.2)
shader_parameter/shear_angle = -0.03
shader_parameter/use_value_gradient = false
shader_parameter/invert = false
shader_parameter/gradient_x = SubResource("GradientTexture1D_47bex")
shader_parameter/gradient_y = SubResource("GradientTexture1D_puwax")

[node name="OverAndUnder" type="Node2D"]
script = ExtResource("1_ooeys")

[node name="Grid" parent="." instance=ExtResource("2_tsop5")]
scale = Vector2(0.9, 0.9)
tile_map_data = PackedByteArray("AAABAAQAAAADAAIAAAABAAMAAAADAAIAAAABAAIAAAADAAIAAAABAAEAAAADAAIAAAABAAAAAAADAAIAAAAAAAAAAAADAAIAAAAAAAEAAAADAAIAAAAAAAIAAAADAAIAAAAAAAMAAAADAAIAAAAAAAQAAAADAAIAAAAAAAUAAAADAAIAAAAAAAcAAAADAAIAAAAAAAgAAAADAAIAAAAAAAkAAAADAAIAAAABAAkAAAADAAIAAAACAAgAAAADAAIAAAACAAUAAAADAAIAAAACAAQAAAADAAIAAAACAAMAAAADAAIAAAACAAIAAAADAAIAAAACAAEAAAADAAIAAAACAAAAAAADAAIAAAADAAAAAAADAAIAAAADAAEAAAADAAIAAAADAAIAAAAEAAAAAAADAAMAAAAEAAAAAAADAAQAAAADAAIAAAADAAgAAAAEAAAAAAADAAkAAAAEAAAAAAACAAkAAAADAAIAAAAOAAkAAAAEAAAAAAAOAAgAAAAEAAAAAAAOAAcAAAAEAAAAAAAOAAUAAAAEAAAAAAAOAAQAAAADAAIAAAAOAAMAAAAEAAAAAAAOAAIAAAAEAAAAAAAOAAEAAAADAAIAAAAOAAAAAAADAAIAAAAPAAAAAAADAAIAAAAPAAEAAAADAAIAAAAPAAIAAAAEAAAAAAAPAAMAAAAEAAAAAAAPAAQAAAADAAIAAAAPAAUAAAAEAAAAAAAPAAcAAAAEAAAAAAAPAAgAAAAEAAAAAAAPAAkAAAAEAAAAAAAQAAkAAAADAAIAAAAQAAgAAAADAAIAAAAQAAcAAAADAAIAAAAQAAYAAAADAAIAAAAQAAUAAAADAAIAAAAQAAQAAAADAAIAAAAQAAMAAAADAAIAAAAQAAIAAAADAAIAAAAQAAEAAAADAAIAAAAQAAAAAAADAAIAAAABAAUAAAADAAIAAAABAAYAAAADAAIAAAABAAcAAAADAAIAAAABAAgAAAADAAIAAAAAAAYAAAADAAIAAAACAAYAAAADAAIAAAACAAcAAAADAAIAAAADAAYAAAAEAAAAAAADAAcAAAAEAAAAAAARAAEAAAADAAIAAAARAAIAAAADAAIAAAARAAMAAAADAAIAAAARAAQAAAADAAIAAAARAAUAAAADAAIAAAARAAYAAAADAAIAAAARAAcAAAADAAIAAAARAAgAAAADAAIAAAARAAkAAAADAAIAAAARAAAAAAADAAIAAAAAAAoAAAADAAIAAAABAAoAAAADAAIAAAACAAoAAAADAAIAAAARAAoAAAADAAIAAAABAAsAAAADAAIAAAACAAsAAAADAAIAAAADAAsAAAADAAIAAAAEAAsAAAADAAIAAAAFAAsAAAADAAIAAAAGAAsAAAADAAIAAAAHAAsAAAADAAIAAAAIAAsAAAADAAIAAAAJAAsAAAADAAIAAAAKAAsAAAADAAIAAAALAAsAAAADAAIAAAAMAAsAAAADAAIAAAANAAsAAAADAAIAAAAOAAsAAAADAAIAAAAPAAsAAAADAAIAAAAQAAsAAAADAAIAAAARAAsAAAADAAIAAAASAAsAAAADAAIAAAAAAAsAAAADAAIAAAATAAsAAAADAAIAAAASAAAAAAADAAIAAAASAAEAAAADAAIAAAASAAIAAAADAAIAAAASAAMAAAADAAIAAAASAAQAAAADAAIAAAASAAUAAAADAAIAAAASAAYAAAADAAIAAAASAAcAAAADAAIAAAASAAgAAAADAAIAAAASAAkAAAADAAIAAAASAAoAAAADAAIAAAATAAAAAAADAAIAAAATAAEAAAADAAIAAAATAAIAAAADAAIAAAATAAMAAAADAAIAAAATAAQAAAADAAIAAAATAAUAAAADAAIAAAATAAYAAAADAAIAAAATAAcAAAADAAIAAAATAAgAAAADAAIAAAATAAkAAAADAAIAAAATAAoAAAADAAIAAAAEAAAAAAADAAIAAAAEAAEAAAADAAIAAAAEAAIAAAAEAAAAAAAEAAMAAAAEAAAAAAAEAAQAAAADAAIAAAAEAAUAAAAEAAAAAAAEAAYAAAAEAAAAAAAEAAcAAAAEAAAAAAAEAAgAAAAEAAAAAAAEAAkAAAAEAAAAAAAFAAAAAAADAAIAAAAFAAEAAAADAAIAAAAFAAIAAAAEAAAAAAAFAAMAAAAEAAAAAAAFAAQAAAADAAIAAAAFAAYAAAADAAIAAAAFAAcAAAADAAIAAAAFAAgAAAADAAIAAAAFAAkAAAAEAAAAAAAGAAAAAAADAAIAAAAGAAMAAAAEAAAAAAAGAAYAAAAEAAAAAAAGAAcAAAAEAAAAAAAGAAgAAAADAAIAAAAGAAkAAAAEAAAAAAAHAAAAAAADAAIAAAAHAAEAAAADAAIAAAAHAAIAAAAEAAAAAAAHAAMAAAAEAAAAAAAHAAQAAAAEAAAAAAAHAAUAAAAEAAAAAAAHAAYAAAAEAAAAAAAHAAcAAAAEAAAAAAAHAAgAAAADAAIAAAAHAAkAAAAEAAAAAAAIAAAAAAADAAIAAAAIAAEAAAADAAIAAAAIAAIAAAAEAAAAAAAIAAMAAAAEAAAAAAAIAAQAAAADAAIAAAAIAAUAAAADAAIAAAAIAAYAAAADAAIAAAAIAAcAAAADAAIAAAAIAAgAAAADAAIAAAAIAAkAAAAEAAAAAAAJAAAAAAAEAAAAAAAJAAEAAAAEAAAAAAAJAAIAAAAEAAAAAAAJAAMAAAAEAAAAAAAJAAQAAAAEAAAAAAAJAAUAAAAEAAAAAAAJAAYAAAAEAAAAAAAJAAcAAAAEAAAAAAAJAAgAAAAEAAAAAAAJAAkAAAAEAAAAAAAKAAAAAAADAAIAAAAKAAEAAAADAAIAAAAKAAIAAAAEAAAAAAAKAAMAAAAEAAAAAAAKAAQAAAADAAIAAAAKAAUAAAADAAIAAAAKAAYAAAADAAIAAAAKAAcAAAADAAIAAAAKAAgAAAADAAIAAAAKAAkAAAAEAAAAAAALAAAAAAADAAIAAAALAAEAAAADAAIAAAALAAIAAAAEAAAAAAALAAMAAAAEAAAAAAALAAQAAAAEAAAAAAALAAUAAAAEAAAAAAALAAYAAAAEAAAAAAALAAcAAAAEAAAAAAALAAgAAAADAAIAAAALAAkAAAAEAAAAAAAMAAAAAAADAAIAAAAMAAEAAAADAAIAAAAMAAIAAAAEAAAAAAAMAAMAAAAEAAAAAAAMAAQAAAAEAAAAAAAMAAUAAAAEAAAAAAAMAAYAAAAEAAAAAAAMAAgAAAADAAIAAAAMAAkAAAAEAAAAAAANAAAAAAADAAIAAAANAAEAAAADAAIAAAANAAIAAAAEAAAAAAANAAMAAAAEAAAAAAANAAQAAAADAAIAAAANAAUAAAADAAIAAAANAAYAAAADAAIAAAANAAcAAAADAAIAAAANAAgAAAADAAIAAAANAAkAAAAEAAAAAAADAAoAAAAEAAAAAAAEAAoAAAAEAAAAAAAFAAoAAAAEAAAAAAAGAAoAAAAEAAAAAAAHAAoAAAAEAAAAAAAIAAoAAAAEAAAAAAAJAAoAAAAEAAAAAAAKAAoAAAAEAAAAAAALAAoAAAAEAAAAAAAMAAoAAAAEAAAAAAANAAoAAAAEAAAAAAAOAAoAAAAEAAAAAAAPAAoAAAAEAAAAAAAQAAoAAAADAAIAAAAOAAYAAAAEAAAAAAAGAAEAAAADAAIAAAAMAAcAAAAEAAAAAAAPAAYAAAAEAAAAAAAFAAUAAAADAAIAAAAGAAUAAAAEAAAAAAAGAAQAAAAEAAAAAAAGAAIAAAAEAAAAAAADAAUAAAAEAAAAAAA=")
tile_set = SubResource("TileSet_d4eyp")

[node name="Gate" parent="Grid" node_paths=PackedStringArray("locks") instance=ExtResource("4_b1u7r")]
position = Vector2(608.889, 92.2223)
locks = [NodePath("../Lock"), NodePath("../Lock2")]

[node name="LevelPortal" parent="Grid" node_paths=PackedStringArray("UI") instance=ExtResource("5_o0t7v")]
position = Vector2(608.889, 31.1111)
UI = NodePath("../../UI")

[node name="Hash" parent="Grid" instance=ExtResource("6_tr5qf")]
position = Vector2(484.444, 286.667)

[node name="Hash2" parent="Grid" instance=ExtResource("6_tr5qf")]
position = Vector2(730, 293.333)

[node name="Lock" parent="Grid" instance=ExtResource("6_45vor")]
position = Vector2(285.556, 352.222)

[node name="Lock2" parent="Grid" instance=ExtResource("6_45vor")]
position = Vector2(917.778, 352.222)

[node name="Key" parent="Grid" node_paths=PackedStringArray("lock", "hash") instance=ExtResource("7_5iu1x")]
position = Vector2(801.111, 422.222)
lock = NodePath("../Lock")
color = 3
_is_encrypted = true
hash = NodePath("../Hash")

[node name="Key2" parent="Grid" node_paths=PackedStringArray("lock", "hash") instance=ExtResource("7_5iu1x")]
position = Vector2(417.778, 410)
lock = NodePath("../Lock2")
color = 2
_is_encrypted = true
hash = NodePath("../Hash2")

[node name="CarrierBug" parent="Grid" instance=ExtResource("8_1j6ll")]
position = Vector2(604.444, 223.333)

[node name="MoverProcess" parent="Grid" instance=ExtResource("9_6qkvx")]
position = Vector2(285.556, 163.333)
_init_dir = Vector2(1, 0)

[node name="DecryptProcess" parent="Grid" instance=ExtResource("11_l0djl")]
position = Vector2(928.889, 160)
_init_dir = Vector2(-1, 0)

[node name="Draw" type="Node2D" parent="." node_paths=PackedStringArray("tilemap")]
visible = false
script = ExtResource("11_607en")
tilemap = NodePath("../Grid")

[node name="UI" type="CanvasLayer" parent="."]

[node name="WrongBotLabel" type="Label" parent="UI"]
modulate = Color(0.207843, 0.760784, 0.0392157, 0)
offset_left = 35.0
offset_top = 38.0
offset_right = 836.0
offset_bottom = 75.0
theme_override_font_sizes/font_size = 36
text = "System process cannot exit the current memory space!"

[node name="SecurityLabel" type="Label" parent="UI"]
modulate = Color(0.207843, 0.760784, 0.0392157, 0)
offset_left = 35.0
offset_top = 38.0
offset_right = 779.0
offset_bottom = 75.0
theme_override_font_sizes/font_size = 36
text = "Memory transfer blocked during security breaches!"

[node name="SegmentedBar" type="Control" parent="UI"]
layout_mode = 3
anchors_preset = 0
offset_left = 972.0
offset_top = 38.0
offset_right = 1120.0
offset_bottom = 72.0
script = ExtResource("12_dns85")
metadata/_edit_group_ = true

[node name="Backdrop" type="Panel" parent="UI/SegmentedBar"]
visible = false
material = SubResource("ShaderMaterial_d45bt")
layout_mode = 0
offset_right = 150.0
offset_bottom = 30.0

[node name="BackgroundBar" type="Panel" parent="UI/SegmentedBar"]
material = SubResource("ShaderMaterial_gtxqq")
layout_mode = 0
offset_right = 150.0
offset_bottom = 30.0

[node name="ForegroundBar" type="Panel" parent="UI/SegmentedBar"]
material = SubResource("ShaderMaterial_8y8o3")
layout_mode = 0
offset_right = 150.0
offset_bottom = 30.0

[node name="TickLabel" type="Label" parent="UI"]
modulate = Color(0.207843, 0.760784, 0.0392157, 1)
offset_left = 976.0
offset_top = 608.0
offset_right = 1116.0
offset_bottom = 634.0
theme_override_font_sizes/font_size = 24
text = "Clock cycles: 0"

[node name="DetectionLabel" type="Label" parent="UI"]
modulate = Color(0.207843, 0.760784, 0.0392157, 1)
offset_left = 976.0
offset_top = 10.0
offset_right = 1119.0
offset_bottom = 36.0
theme_override_font_sizes/font_size = 24
text = "Detection level"

[node name="LevelLoseUI" parent="UI" instance=ExtResource("14_fcd8v")]
visible = false
anchors_preset = 10
anchor_bottom = 0.0
offset_bottom = 647.0
grow_vertical = 1

[node name="LevelEndUI" parent="UI" instance=ExtResource("15_pmuli")]
visible = false
